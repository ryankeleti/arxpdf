#!/bin/sh

# arxpdf - Retrieve arXiV preprints as PDFs
# Copyright (C) 2019 Matthew Kukla <matt.kukla@yandex.ru>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

VERSION=0.1.0
URL=https://arxiv.org/pdf/

usage(){
echo 'Usage: arxpdf [arXiV id]... to download a PDF of [arXiV id]...'
echo '       arxpdf [arXiV id]vn... to download the nth version of [arXiV id]'
echo
echo 'arxpdf accepts both the old arXiV identifier format (subject.SC/YYMMNNN)'
echo 'and the current identifier format (YYMM.number).'
echo
echo 'For more about arXiV identifiers, see arxiv.org/help/arxiv_identifier'
echo
echo 'Options:'
echo '-h, --help        Show this message'
echo '-v, --v           Show version number'
exit
}

# Failure message for corrupt PDF
fail_verify(){
echo "[ERROR] Failed to download arXiV:$1 (invalid identifier or corrupt PDF)."
}

# Failure message for curl 
fail_connect(){
echo "[ERROR] Connection to the arXiV failed."
}

# Check that the PDF isn't corrupt and has downloaded in its entirety 
verify(){
if [[ "$(tail "$1".pdf -n 1)"  != "%%EOF" ]]; then
    fail_verify "$1"
    rm "$1".pdf
fi
}


while [ "$#" -gt 0 ]; do
# Download using current identifier format
    if [[ $1 =~ ^[0-9]{4}\.[0-9]{5}(v[0-9]+)?$ ]]; then
        if ! curl  $URL/"$1".pdf -o "$1.pdf" -s; then
            fail_connect
        else
            verify "$1"
        fi    
        shift

# Download using old identifier format
    elif [[ $1 =~ ^.*\/[0-9]{7}(v[0-9]+)?$ ]]; then
        FILE=$(printf '%s' "$1" | tr '/' '-')
        if ! curl $URL/"$1".pdf -o "$FILE".pdf -s; then
            fail_connect
        else    
            verify "$FILE"
        fi    
        shift
    
    elif [[ $1 =~ ^-h|--help$ ]]; then
        usage
    
    elif [[ $1 =~ ^-v|--version$ ]]; then
        echo $VERSION
        exit

    else 
        echo "Unknown option: $1"
        exit 1
    fi    
done
